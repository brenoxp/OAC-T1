*----------------------------------------------------------------------------------------------------------------------------------------------*
.file string

.file (which may also be spelled `.app-file') tells as that we are about to start a new logical file. string is the new file name. In general, the filename is recognized whether or not it is surrounded by quotes `"'; but if you wish to specify an empty file name, you must give the quotes--"". This statement may go away in future: it is only recognized to be compatible with old as programs. In some configurations of as, .file has already been removed to avoid conflicts with other assemblers

*----------------------------------------------------------------------------------------------------------------------------------------------*

.section name, subsection

Assemble the following code into end of subsection numbered subsection in the COFF named section name. If you omit subsection, as uses subsection number zero. `.section .text' is equivalent to the .text directive; `.section .data' is equivalent to the .data directive. This directive is only supported for targets that actually support arbitrarily named sections; on a.out targets, for example, it is not accepted, even with a standard a.out section name as its parameter. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.global symbol, .globl symbol

.global makes the symbol visible to ld. If you define symbol in your partial program, its value is made available to other partial programs that are linked with it. Otherwise, symbol takes its attributes from a symbol of the same name from another file linked into the same program.

Both spellings (`.globl' and `.global') are accepted, for compatibility with other assemblers.

On the HPPA, .global is not always enough to make it accessible to other partial programs. You may need the HPPA-only .EXPORT directive as well. See section 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.data subsection

.data tells as to assemble the following statements onto the end of the data subsection numbered subsection (which is an absolute expression). If subsection is omitted, it defaults to zero. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.align abs-expr , abs-expr

Pad the location counter (in the current subsection) to a particular storage boundary. The first expression (which must be absolute) is the alignment required, as described below. The second expression (also absolute) gives the value to be stored in the padding bytes. It (and the comma) may be omitted. If it is omitted, the padding bytes are zero.

The way the required alignment is specified varies from system to system. For the a29k, hppa, m86k, m88k, w65, sparc, and Hitachi SH, and i386 using ELF format, the first expression is the alignment request in bytes. For example `.align 8' advances the location counter until it is a multiple of 8. If the location counter is already a multiple of 8, no change is needed.

For other systems, including the i386 using a.out format, it is the number of low-order zero bits the location counter must have after advancement. For example `.align 3' advances the location counter until it a multiple of 8. If the location counter is already a multiple of 8, no change is needed.

This inconsistency is due to the different behaviors of the various native assemblers for these systems which GAS must emulate. GAS also provides .balign and .p2align directives, described later, which have a consistent behavior across all architectures (but are specific to GAS). 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.type int

This directive, permitted only within .def/.endef pairs, records the integer int as the type attribute of a symbol table entry.

`.type' is associated only with COFF format output; when as is configured for b.out output, it accepts this directive but ignores it. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.size

This directive is generated by compilers to include auxiliary debugging information in the symbol table. It is only permitted inside .def/.endef pairs.

`.size' is only meaningful when generating COFF format output; when as is generating b.out, it accepts this directive but ignores it. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.word expressions

This directive expects zero or more expressions, of any section, separated by commas.

The size of the number emitted, and its byte order, depend on what target computer the assembly is for.

    Warning: Special Treatment to support Compilers 

Machines with a 32-bit address space, but that do less than 32-bit addressing, require the following special treatment. If the machine of interest to you does 32-bit addressing (or doesn't require it; see section Machine Dependent Features), you can ignore this issue.

In order to assemble compiler output into something that works, as occasionlly does strange things to `.word' directives. Directives of the form `.word sym1-sym2' are often emitted by compilers as part of jump tables. Therefore, when as assembles a directive of the form `.word sym1-sym2', and the difference between sym1 and sym2 does not fit in 16 bits, as creates a secondary jump table, immediately before the next label. This secondary jump table is preceded by a short-jump to the first byte after the secondary table. This short-jump prevents the flow of control from accidentally falling into the new table. Inside the table is a long-jump to sym2. The original `.word' contains sym1 minus the address of the long-jump to sym2.

If there were several occurrences of `.word sym1-sym2' before the secondary jump table, all of them are adjusted. If there was a `.word sym3-sym4', that also did not fit in sixteen bits, a long-jump to sym4 is included in the secondary jump table, and the .word directives are adjusted to contain sym3 minus the address of the long-jump to sym4; and so on, for as many entries in the original jump table as necessary. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.ascii "string"...

.ascii expects zero or more string literals (see section Strings) separated by commas. It assembles each string (with no automatic trailing zero byte) into consecutive addresses. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.text subsection

Tells as to assemble the following statements onto the end of the text subsection numbered subsection, which is an absolute expression. If subsection is omitted, subsection number zero is used. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.set symbol, expression

Set the value of symbol to expression. This changes symbol's value and type to conform to expression. If symbol was flagged as external, it remains flagged. (See section Symbol Attributes.)

You may .set a symbol many times in the same assembly.

If you .set a global symbol, the value stored in the object file is the last value stored into it.

The syntax for set on the HPPA is `symbol .set expression'. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.mdebug

*----------------------------------------------------------------------------------------------------------------------------------------------*

.ent function[, n]
Mark the beginning of function. An optional number may follow for compatibility with the OSF/1 assembler, but is ignored. When generating .mdebug information, this will create a procedure descriptor for the function. In ELF, it will mark the symbol as a function a-la the generic .type directive.
I believe the ".ent" directive is specific to MIPS or Alpha CPU's, I don't think it applies to x86 assembler (if that's what you're doing).

*----------------------------------------------------------------------------------------------------------------------------------------------*

.mask mask, offset

    Indicate which of the integer registers are saved in the current function's stack frame. mask is interpreted a bit mask in which bit n set indicates that register n is saved. The registers are saved in a block located offset bytes from the canonical frame address (CFA) which is the value of the stack pointer on entry to the function. The registers are saved sequentially, except that the return address register (normally $26) is saved first.

    This and the other directives that describe the stack frame are currently only used when generating .mdebug information. They may in the future be used to generate DWARF2 .debug_frame unwind information for hand written assembly. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.fmask mask, offset

    Indicate which of the floating-point registers are saved in the current stack frame. The mask and offset parameters are interpreted as with .mask. 


*----------------------------------------------------------------------------------------------------------------------------------------------*

.frame framereg, frameoffset, retreg[, argoffset]

    Describes the shape of the stack frame. The frame pointer in use is framereg; normally this is either $fp or $sp. The frame pointer is frameoffset bytes below the CFA. The return address is initially located in retreg until it is saved as indicated in .mask. For compatibility with OSF/1 an optional argoffset parameter is accepted and ignored. It is believed to indicate the offset from the CFA to the saved argument registers. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

-mdebug, -no-mdebug

    Enables or disables the generation of .mdebug encapsulation for stabs directives and procedure descriptors. The default is to automatically enable .mdebug when the first stabs directive is seen. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.previous is a directive that lets you swap back and forth between two elf sections. It is a shortcut that allows denser assembly files and lets you for example declare initialized data within a stream of code or vice versa.

For example say you have an assembler file with a data and a code section.

If you want - in the middle of a function - declare a constant in the data segment you can use the .previous statement like this:

  nop            // some code

.previous        // swaps current section (code) with previous section (data)

MyConstant:
  .word 0x0001   // some data

.previous        // swaps curent section (data) with previous section (code)

  nop            // more code

*----------------------------------------------------------------------------------------------------------------------------------------------*

.nan

9.27.10 Directives to record which NaN encoding is being used

The IEEE 754 floating-point standard defines two types of not-a-number (NaN) data: “signalling” NaNs and “quiet” NaNs. The original version of the standard did not specify how these two types should be distinguished. Most implementations followed the i387 model, in which the first bit of the significand is set for quiet NaNs and clear for signalling NaNs. However, the original MIPS implementation assigned the opposite meaning to the bit, so that it was set for signalling NaNs and clear for quiet NaNs.

The 2008 revision of the standard formally suggested the i387 choice and as from Sep 2012 the current release of the MIPS architecture therefore optionally supports that form. Code that uses one NaN encoding would usually be incompatible with code that uses the other NaN encoding, so MIPS ELF objects have a flag (EF_MIPS_NAN2008) to record which encoding is being used.

Assembly files can use the .nan directive to select between the two encodings. `.nan 2008' says that the assembly file uses the IEEE 754-2008 encoding while `.nan legacy' says that the file uses the original MIPS encoding. If several .nan directives are given, the final setting is the one that is used.

The command-line options -mnan=legacy and -mnan=2008 can be used instead of `.nan legacy' and `.nan 2008' respectively. However, any .nan directive overrides the command-line setting.

`.nan legacy' is the default if no .nan directive or -mnan option is given.

Note that gnu as does not produce NaNs itself and therefore these directives do not affect code generation. They simply control the setting of the EF_MIPS_NAN2008 flag.

Traditional MIPS assemblers do not support these directives. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

7.56 .gnu_attribute tag,value

Record a gnu object attribute for this file. See Object Attributes. 

*----------------------------------------------------------------------------------------------------------------------------------------------*

.rdata

.rdata is for const data. It is the read only version of the .data segment. Instructs the assembler to add subsequent data into the .rdata section. 

*----------------------------------------------------------------------------------------------------------------------------------------------*
